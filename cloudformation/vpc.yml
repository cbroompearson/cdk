AWSTemplateFormatVersion: '2010-09-09'
Description: This stack deploys a Fargate cluster that is in a VPC with both
             public and private subnets.  It also sets up a ALB with security groups.
Parameters:
  RetentionInDays:
    Description: 'Specifies the number of days you want to retain log events.'
    Type: Number
    Default: 365

  TrafficType:
    Description: 'The type of traffic to log.'
    Type: String
    Default: ALL
    AllowedValues:
    - ACCEPT
    - REJECT
    - ALL

  TagDcl:
    Description: 'The t_dcl tag for resources'
    Type: String
    Default: 2
    AllowedValues:
    - 1
    - 2
    - 3
    - 4

  TagCostcenter:
    Type: String
    AllowedPattern: "(.*\\d.*)"
    Default: "10.365.74172.3651039.40857.0000.35"
    Description: "The cost center tag for your project"

  TagAppid:
    Type: String
    AllowedPattern: "SVC\\d{5}"
    Default: "SVC01831"
    Description: "The App ID for your project, must be format SVCNNNNN"

  ServiceName:
    Type: String
    Default: ocu
    Description: "Used as a 3 letter acrynom or whatever you want to append to the name of all resources, we use $ServiceName-$EnvType for naming."

  EnvTag:
    Type: String
    Default: DEV
    Description: "A friendly environment name that will be used for namespacing all cluster resources as well as tagging."
    AllowedValues:
    - DEV
    - QA
    - DR
    - POC
    - PRD
    - PRF
    - QA
    - STG
    - TST

  EnvType:
    Type: String
    Default: dev
    Description: "A friendly environment name that will be used for namespacing all cluster resources as well as tagging."
    AllowedValues:
    - dev
    - qa
    - dr
    - poc
    - prd
    - prf
    - qa
    - stg
    - tst


  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.160.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.160.0.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.160.1.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.160.2.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.160.3.0/24

Resources:
  # VPC in which containers will be networked.
  # It has two public subnets, and two private subnets.
  # We distribute the subnets across the first two available subnets
  # for the region, for high availability.
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !Ref VpcCIDR
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref ServiceName
              -  !Ref EnvType
              - 'vpc'
        - Key: t_AppID
          Value: !Ref TagAppid
        - Key: t_cost_centre
          Value: !Ref TagCostcenter
        - Key: t_dcl
          Value: !Ref TagDcl
        - Key: t_environment
          Value: !Ref EnvTag

  
  # Two public subnets, where containers can have public IP addresses
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref ServiceName
              - !Ref EnvType
              - 'pubsubnet1'
        - Key: t_AppID
          Value: !Ref TagAppid
        - Key: t_cost_centre
          Value: !Ref TagCostcenter
        - Key: t_dcl
          Value: !Ref TagDcl
        - Key: t_environment
          Value: !Ref EnvTag

      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref ServiceName
              - !Ref EnvType
              - 'pubsubnet2'
        - Key: t_AppID
          Value: !Ref TagAppid
        - Key: t_cost_centre
          Value: !Ref TagCostcenter
        - Key: t_dcl
          Value: !Ref TagDcl
        - Key: t_environment
          Value: !Ref EnvTag

      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true

  # Two private subnets where containers will only have private
  # IP addresses, and will only be reachable by other members of the
  # VPC
  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref ServiceName
              - !Ref EnvType
              - 'privsubnet1'
        - Key: t_AppID
          Value: !Ref TagAppid
        - Key: t_cost_centre
          Value: !Ref TagCostcenter
        - Key: t_dcl
          Value: !Ref TagDcl
        - Key: t_environment
          Value: !Ref EnvTag

      CidrBlock: !Ref PrivateSubnet1CIDR
  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref ServiceName
              - !Ref EnvType
              - 'privsubnet2'
        - Key: t_AppID
          Value: !Ref TagAppid
        - Key: t_cost_centre
          Value: !Ref TagCostcenter
        - Key: t_dcl
          Value: !Ref TagDcl
        - Key: t_environment
          Value: !Ref EnvTag

      CidrBlock: !Ref PrivateSubnet2CIDR

  # Setup networking resources for the public subnets. Containers
  # in the public subnets have public IP addresses and the routing table
  # sends network traffic via the internet gateway.
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref ServiceName
              - !Ref EnvType
              - 'ig'
        - Key: t_AppID
          Value: !Ref TagAppid
        - Key: t_cost_centre
          Value: !Ref TagCostcenter
        - Key: t_dcl
          Value: !Ref TagDcl
        - Key: t_environment
          Value: !Ref EnvTag

  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref ServiceName
              - !Ref EnvType
              - 'pubRouteTable'
        - Key: t_AppID
          Value: !Ref TagAppid
        - Key: t_cost_centre
          Value: !Ref TagCostcenter
        - Key: t_dcl
          Value: !Ref TagDcl
        - Key: t_environment
          Value: !Ref EnvTag

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable

  # Setup networking resources for the private subnets. Containers
  # in these subnets have only private IP addresses, and must use a NAT
  # gateway to talk to the internet. We launch two NAT gateways, one for
  # each private subnet.
  NatGatewayOneAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
        Domain: vpc
  NatGatewayTwoAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
        Domain: vpc
  NatGatewayOne:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayOneAttachment.AllocationId
      SubnetId: !Ref PublicSubnetOne
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref ServiceName
              - !Ref EnvType
              - 'privRouteTable1'
        - Key: t_AppID
          Value: !Ref TagAppid
        - Key: t_cost_centre
          Value: !Ref TagCostcenter
        - Key: t_dcl
          Value: !Ref TagDcl
        - Key: t_environment
          Value: !Ref EnvTag
  NatGatewayTwo:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayTwoAttachment.AllocationId
      SubnetId: !Ref PublicSubnetTwo
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref ServiceName
              - !Ref EnvType
              - 'privRouteTable1'
        - Key: t_AppID
          Value: !Ref TagAppid
        - Key: t_cost_centre
          Value: !Ref TagCostcenter
        - Key: t_dcl
          Value: !Ref TagDcl
        - Key: t_environment
          Value: !Ref EnvType
  PrivateRouteTableOne:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref ServiceName
              - !Ref EnvType
              - 'privRouteTable1'
        - Key: t_AppID
          Value: !Ref TagAppid
        - Key: t_cost_centre
          Value: !Ref TagCostcenter
        - Key: t_dcl
          Value: !Ref TagDcl
        - Key: t_environment
          Value: !Ref EnvTag

  PrivateRouteOne:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayOne
  PrivateRouteTableOneAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      SubnetId: !Ref PrivateSubnetOne
  PrivateRouteTableTwo:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref ServiceName
              - !Ref EnvType
              - 'privRouteTable2'
        - Key: t_AppID
          Value: !Ref TagAppid
        - Key: t_cost_centre
          Value: !Ref TagCostcenter
        - Key: t_dcl
          Value: !Ref TagDcl
        - Key: t_environment
          Value: !Ref EnvTag
        
          
  PrivateRouteTwo:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayTwo
  PrivateRouteTableTwoAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      SubnetId: !Ref PrivateSubnetTwo


  # This is a role which is used by the ECS tasks themselves.
  VPCLogRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['-', [!Ref 'ServiceName', !Ref 'EnvType', 'vpc-log-role']]
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # Allow the ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
                - 'logs:DescribeLogGroups'
                - 'logs:DescribeLogStreams'

              Resource: '*'

  # Setup Cloudwatch log group for VPC Logging.
  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Join ['-', [!Ref 'ServiceName', !Ref 'EnvType', 'vpc-logs']]
      RetentionInDays: !Ref RetentionInDays
  FlowLog:
    Type: 'AWS::EC2::FlowLog'
    Properties:
      DeliverLogsPermissionArn: !GetAtt 'VPCLogRole.Arn'
      LogGroupName: !Ref LogGroup
      ResourceId: !Ref VPC
      ResourceType: 'VPC'
      TrafficType: !Ref TrafficType

# These are the values output by the CloudFormation template. Be careful
# about changing any of them, because of them are exported with specific
# names so that the other task related CF templates can use them.
Outputs:
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  VPCLogRole:
    Description: The ARN of the VPC log role
    Value: !GetAtt 'VPCLogRole.Arn'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'VPCLogRole' ] ]
  VPCId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref 'VPC'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'VPCId' ] ]
  PublicSubnetOne:
    Description: Public subnet one
    Value: !Ref 'PublicSubnetOne'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnetOne' ] ]
  PublicSubnetTwo:
    Description: Public subnet two
    Value: !Ref 'PublicSubnetTwo'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnetTwo' ] ]
  PrivateSubnetOne:
    Description: Private subnet one
    Value: !Ref 'PrivateSubnetOne'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PrivateSubnetOne' ] ]
  PrivateSubnetTwo:
    Description: Private subnet two
    Value: !Ref 'PrivateSubnetTwo'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PrivateSubnetTwo' ] ]
  LogGroupName:
    Description: 'The name of the CloudWatch Logs log group where Amazon EC2 publishes your flow logs.'
    Value: !Ref LogGroup
  LogGroupARN:
    Description: 'The ARN of the CloudWatch Logs log group where Amazon EC2 publishes your flow logs.'
    Value: !GetAtt 'LogGroup.Arn'
  PublicSubnets:
    Description: 'The public subnets list used for Loadbalancer'
    Value: !Join [',', [!Ref 'PublicSubnetOne', !Ref 'PublicSubnetTwo']]
    Export: 
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnets' ] ] 